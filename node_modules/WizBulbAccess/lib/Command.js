'use strict';

const PORT = 38899;

class Command {

	constructor(address, options = {}) {
		this.adress = adress;
		this.succes = false;
	}

	isSuccess() {
		return this.success;
	}

	getFunctions() {
		// Function order: onoff, dimming, temperature, color, scenery
		var func = [];
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('state')) {
			func[0] = true;
		} else {
			func[0] = false;
        }
		if (JSonObj.hasOwnProperty('dimming')) {
			func[1] = true;
		} else {
			func[1] = false;
		}
		if (JSonObj.hasOwnProperty('temp')) {
			func[2] = true;
		} else {
			func[2] = false;
		}
		if (JSonObj.hasOwnProperty('r')) {
			func[3] = true;
		} else {
			func[3] = false;
		}
		if (JSonObj.hasOwnProperty('sceneId')) {
			func[4] = true;
		} else {
			func[4] = false;
		}
		return func;
    }

	getState() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('state')) {
			this.state = JSonObj.state;
			this.success = true;
		}
		return this.state;
	}

	getDimming() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('dimming')) {
			this.dimming = JSonObj.dimming;
			this.success = true;
		}
		return this.dimming;
	}

	getTemperature() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('temp')) {
			this.temp = JSonObj.temp;
			this.success = true;
		}
		return this.temp;
	}

	getRGB() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		var val = [];
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('r')) {
			val[0] = JSonObj.r;
			val[1] = JSonObj.g;
			val[2] = JSonObj.b;
			this.success = true;
		}
		return val;
	}

	getScene() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('sceneId')) {
			this.sceneId = JSonObj.sceneId;
			this.success = true;
		}
		return this.sceneId;
	}

	getSpeed() {
		var msg = '{"method":"getPilot","params":{}}';
		var data = await sendMessage(msg);
		this.success = false;
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('speed')) {
			this.speed = JSonObj.speed;
			this.success = true;
		}
		return this.speed;
	}

	setOn() {
		this.success = false;
		msg = '{"method":"setPilot","params":{"state":true}}';
		var data = await sendMessage(msg);
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('success')) {
			this.success = JSonObj.success;
		}
	}

	setOff() {
		this.success = false;
		msg = '{"method":"setPilot","params":{"state":false}}';
		var data = await sendMessage(msg);
		JSonObj = JSON.stringify(data);
		if (JSonObj.hasOwnProperty('success')) {
			this.success = JSonObj.success;
		}
	}

	setBrightness(level) {
		this.success = false;
		if (level => 0 && level <= 100) {
			msg = '{"method":"setPilot","params":{"dimming":XX}}';
			msg.replace('XX', level.toString());
			var data = await sendMessage(msg);
			JSonObj = JSON.stringify(data);
			if (JSonObj.hasOwnProperty('success')) {
				this.success = JSonObj.success;
			}
		}
	}

	setLightTemp(level) {
		this.success = false;
		if (level => 2200 && level <= 6500) {
			msg = '{"method":"setPilot","params":{"temp":XXXX}}';
			msg.replace('XXXX', level.toString())
			var data = await sendMessage(msg);
			JSonObj = JSON.stringify(data);
			if (JSonObj.hasOwnProperty('success')) {
				this.success = JSonObj.success;
			}
		}
	}

	setColorRGB(red,green,blue) {
		this.success = false;
		if (red => 0 && red <= 255) {
			if (green => 0 && green <= 255) {
				if (blue => 0 && blue <= 255) {
					msg = '{"method":"setPilot","params":{"r":RRR,"g":GGG,"b";BBB}}';
					msg.replace('RRR', red.toString());
					msg.replace('GGG', green.toString());
					msg.replace('BBB', blue.toString());
					var data = await sendMessage(msg);
					JSonObj = JSON.stringify(data);
					if (JSonObj.hasOwnProperty('success')) {
						this.success = JSonObj.success;
					}
				}
			}
		}
	}

	onLightScene(scene,speed) {
		this.success = false;
		if (scene => 1 && scene <= 32) {
			if (speed => 0 && speed =< 100) {
				msg = '{"method":"setPilot","params":{"sceneId":III,"speed":SSS}}';
				msg.replace('III', scene.toString());
				msg.replace('SSS', speed.toString());
				var data = await sendMessage(msg);
				JSonObj = JSON.stringify(data);
				if (JSonObj.hasOwnProperty('success')) {
					this.success = JSonObj.success;
				}
			}
		} else if (scenes == 1000) {
			if (speed => 0 && speed =< 100) {
				msg = '{"method":"setPilot","params":{"sceneId":1000,"speed":SSS}}';
				msg.replace('SSS', speed.toString());
				var data = await sendMessage(msg);
				JSonObj = JSON.stringify(data);
				if (JSonObj.hasOwnProperty('success')) {
					this.success = JSonObj.success;
				}
			}
		}
	}

	async sendMessage(message) {
		this.timeout = 1000;
		return new Promise(function(resolve, reject) {
			client = dgram.createSocket('udp4');
			client.on('message', function (msg, info) {
				client.close();
				resolve(msg);
			});

			client.send(message, 0, message.length, PORT, this.adress, function (err, bytes) {
				if (error) {
					client.close();
					resolve(null);
				}
			});

			setTimeout(() => {
				client.close();
				this._scanned = true;
				resolve(null);
			}, timeout);
		});
	}
}

module.exports = Command;
